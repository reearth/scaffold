package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"

	"github.com/reearth/server-scaffold/internal/transport/gql/gqlmodel"
	"github.com/reearth/server-scaffold/internal/usecase/assetuc"
	"github.com/reearth/server-scaffold/pkg/project"
)

// CreateAsset is the resolver for the createAsset field.
func (r *mutationResolver) CreateAsset(ctx context.Context, input gqlmodel.CreateAssetInput) (*gqlmodel.Asset, error) {
	a, err := r.uc.Asset.Create.Execute(ctx, assetuc.CreateParam{
		ProjectID: project.ID(input.ProjectID),
		Name:      input.Name,
		// Data:      input.Data,
	}, r.user(ctx))
	return gqlmodel.NewAsset(a), err
}

// UpdateAsset is the resolver for the updateAsset field.
func (r *mutationResolver) UpdateAsset(ctx context.Context, input gqlmodel.UpdateAssetInput) (*gqlmodel.Asset, error) {
	panic(fmt.Errorf("not implemented: UpdateAsset - updateAsset"))
}

// DeleteAsset is the resolver for the deleteAsset field.
func (r *mutationResolver) DeleteAsset(ctx context.Context, assetID gqlmodel.ID) (gqlmodel.ID, error) {
	panic(fmt.Errorf("not implemented: DeleteAsset - deleteAsset"))
}

// Assets is the resolver for the assets field.
func (r *queryResolver) Assets(ctx context.Context, filter gqlmodel.AssetFilter) (*gqlmodel.AssetConnection, error) {
	panic(fmt.Errorf("not implemented: Assets - assets"))
}
