// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/reearth/server-scaffold/internal/boot"
	"github.com/reearth/server-scaffold/internal/infra/gcp"
	"github.com/reearth/server-scaffold/internal/infra/mongo"
	"github.com/reearth/server-scaffold/internal/transport/cli"
	"github.com/reearth/server-scaffold/internal/transport/echo"
	"github.com/reearth/server-scaffold/internal/usecase"
	"github.com/reearth/server-scaffold/internal/usecase/assetuc"
	"github.com/reearth/server-scaffold/internal/usecase/projectuc"
	"github.com/reearth/server-scaffold/internal/usecase/useruc"
	"github.com/reearth/server-scaffold/internal/usecase/workspaceuc"
	"github.com/reearth/server-scaffold/pkg/asset"
)

// Injectors from wire.go:

func InitializeEcho(ctx context.Context, dev bool) (*echo.Server, error) {
	config := boot.LoadConfig()
	database, err := boot.InitMongo(ctx, config)
	if err != nil {
		return nil, err
	}
	mongoAsset := mongo.NewAsset(database)
	project := mongo.NewProject(database)
	workspace := mongo.NewWorkspace(database)
	policy := asset.NewPolicy()
	findByIDsUsecase := assetuc.NewFindByIDs(mongoAsset, project, workspace, policy)
	findByProjectUsecase := assetuc.NewFindByProject(mongoAsset, project, workspace, policy)
	storage := gcp.NewStorage()
	createUsecase := assetuc.NewCreateUsecase(mongoAsset, project, workspace, policy, storage)
	updateUsecase := assetuc.NewUpdate(mongoAsset, project, workspace, policy)
	assetucUsecase := assetuc.New(findByIDsUsecase, findByProjectUsecase, createUsecase, updateUsecase)
	projectucUsecase := projectuc.New()
	workspaceucUsecase := workspaceuc.New()
	user := mongo.NewUser(database)
	findBySubUsecase := useruc.NewFindBySub(user)
	userucUsecase := useruc.New(findBySubUsecase)
	usecases := usecase.NewUsecases(assetucUsecase, projectucUsecase, workspaceucUsecase, userucUsecase)
	echoConfig := echo.NewEchoConfig(config, usecases, dev)
	server := echo.New(echoConfig)
	return server, nil
}

func InitializeCLI(ctx context.Context, args []string) (*cli.CLI, error) {
	config := boot.LoadConfig()
	database, err := boot.InitMongo(ctx, config)
	if err != nil {
		return nil, err
	}
	cliConfig := cli.NewCLIConfig(args, database)
	cliCLI := cli.NewCLI(cliConfig)
	return cliCLI, nil
}
