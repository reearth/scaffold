// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/reearth/scaffold/server/internal/infra/gcp"
	"github.com/reearth/scaffold/server/internal/infra/mongo"
	"github.com/reearth/scaffold/server/internal/transport/cli"
	"github.com/reearth/scaffold/server/internal/transport/echo"
	"github.com/reearth/scaffold/server/internal/usecase"
	"github.com/reearth/scaffold/server/internal/usecase/projectuc"
	"github.com/reearth/scaffold/server/internal/usecase/todouc"
	"github.com/reearth/scaffold/server/internal/usecase/useruc"
	"github.com/reearth/scaffold/server/internal/usecase/workspaceuc"
	"github.com/reearth/scaffold/server/pkg/todo"
)

// Injectors from wire.go:

func InitEcho(ctx context.Context) (*echo.Server, error) {
	config := LoadConfig()
	database, err := InitMongo(ctx, config)
	if err != nil {
		return nil, err
	}
	mongoTodo := mongo.NewTodo(database)
	project := mongo.NewProject(database)
	workspace := mongo.NewWorkspace(database)
	policy := todo.NewPolicy()
	findByIDs := &todouc.FindByIDs{
		TodoRepo:      mongoTodo,
		ProjectRepo:   project,
		WorkspaceRepo: workspace,
		TodoPolicy:    policy,
	}
	findByProject := &todouc.FindByProject{
		TodoRepo:      mongoTodo,
		ProjectRepo:   project,
		WorkspaceRepo: workspace,
		TodoPolicy:    policy,
	}
	storage := gcp.NewStorage()
	create := &todouc.Create{
		TodoRepo:      mongoTodo,
		ProjectRepo:   project,
		WorkspaceRepo: workspace,
		TodoPolicy:    policy,
		Storage:       storage,
	}
	update := &todouc.Update{
		TodoRepo:      mongoTodo,
		ProjectRepo:   project,
		WorkspaceRepo: workspace,
		TodoPolicy:    policy,
	}
	todoucUsecase := &todouc.Usecase{
		FindByIDs:     findByIDs,
		FindByProject: findByProject,
		Create:        create,
		Update:        update,
	}
	projectucUsecase := &projectuc.Usecase{}
	workspaceucUsecase := &workspaceuc.Usecase{}
	user := mongo.NewUser(database)
	findBySub := &useruc.FindBySub{
		UserRepo: user,
	}
	userucUsecase := &useruc.Usecase{
		FindBySub: findBySub,
	}
	usecases := usecase.Usecases{
		Todo:      todoucUsecase,
		Project:   projectucUsecase,
		Workspace: workspaceucUsecase,
		User:      userucUsecase,
	}
	echoConfig := newEchoConfig(config, usecases)
	server := echo.New(echoConfig)
	return server, nil
}

func InitCLI(ctx context.Context, args []string) (*cli.CLI, error) {
	config := LoadConfig()
	database, err := InitMongo(ctx, config)
	if err != nil {
		return nil, err
	}
	cliCLI := cli.New(args, database)
	return cliCLI, nil
}
