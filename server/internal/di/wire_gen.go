// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/reearth/scaffold/server/internal/infra/gcp"
	"github.com/reearth/scaffold/server/internal/infra/mongo"
	"github.com/reearth/scaffold/server/internal/transport/cli"
	"github.com/reearth/scaffold/server/internal/transport/echo"
	"github.com/reearth/scaffold/server/internal/usecase"
	"github.com/reearth/scaffold/server/internal/usecase/assetuc"
	"github.com/reearth/scaffold/server/internal/usecase/projectuc"
	"github.com/reearth/scaffold/server/internal/usecase/useruc"
	"github.com/reearth/scaffold/server/internal/usecase/workspaceuc"
	"github.com/reearth/scaffold/server/pkg/asset"
)

// Injectors from wire.go:

func InitEcho(ctx context.Context) (*echo.Server, error) {
	config := LoadConfig()
	database, err := InitMongo(ctx, config)
	if err != nil {
		return nil, err
	}
	mongoAsset := mongo.NewAsset(database)
	project := mongo.NewProject(database)
	workspace := mongo.NewWorkspace(database)
	policy := asset.NewPolicy()
	findByIDs := assetuc.NewFindByIDs(mongoAsset, project, workspace, policy)
	findByProject := assetuc.NewFindByProject(mongoAsset, project, workspace, policy)
	storage := gcp.NewStorage()
	create := assetuc.NewCreate(mongoAsset, project, workspace, policy, storage)
	update := assetuc.NewUpdate(mongoAsset, project, workspace, policy)
	assetucUsecase := assetuc.New(findByIDs, findByProject, create, update)
	projectucUsecase := projectuc.New()
	workspaceucUsecase := workspaceuc.New()
	user := mongo.NewUser(database)
	findBySub := useruc.NewFindBySub(user)
	userucUsecase := useruc.New(findBySub)
	usecases := usecase.Usecases{
		Asset:     assetucUsecase,
		Project:   projectucUsecase,
		Workspace: workspaceucUsecase,
		User:      userucUsecase,
	}
	echoConfig := newEchoConfig(config, usecases)
	server := echo.New(echoConfig)
	return server, nil
}

func InitCLI(ctx context.Context, args []string) (*cli.CLI, error) {
	config := LoadConfig()
	database, err := InitMongo(ctx, config)
	if err != nil {
		return nil, err
	}
	cliCLI := cli.New(args, database)
	return cliCLI, nil
}
