package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"

	"github.com/reearth/scaffold/server/internal/transport/gql/gqlmodel"
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input gqlmodel.CreateProjectInput) (*gqlmodel.Project, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, input gqlmodel.UpdateProjectInput) (*gqlmodel.Project, error) {
	panic(fmt.Errorf("not implemented: UpdateProject - updateProject"))
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, projectID gqlmodel.ID) (gqlmodel.ID, error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// Workspace is the resolver for the workspace field.
func (r *projectResolver) Workspace(ctx context.Context, obj *gqlmodel.Project) (*gqlmodel.Workspace, error) {
	panic(fmt.Errorf("not implemented: Workspace - workspace"))
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context, filter gqlmodel.ProjectFilter) (*gqlmodel.ProjectConnection, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}

// Project returns ProjectResolver implementation.
func (r *Resolver) Project() ProjectResolver { return &projectResolver{r} }

type projectResolver struct{ *Resolver }
